<?xml version="1.0" encoding="UTF-8"?>
<project name="ReaderJ" default="help">
  <loadproperties srcFile="local.properties" />
  <property file="ant.properties" />
  <loadproperties srcFile="project.properties" />

  <!-- quick check on sdk.dir -->
  <fail
    message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
    unless="sdk.dir"
  />

	<target name="init" description="Initialization...">
		<fail message="Ant 1.7.0 or higher is required. Please upgrade your ant.">
			<condition>
				<not>
					<antversion property="ant.version" atleast="1.7.0"/>
				</not>
			</condition>
		</fail>
	</target>

	<target name="native" unless="native.libraries.are.uptodate">
		<fail message="Native libraries are not up-to-date. Please run ndk-build manually.">
			<condition>
				<os family="windows" />
			</condition>
		</fail>
		<echo message="Building native libraries..."/>
		<exec executable="${ndk.dir}/ndk-build" />
		<echo message="DONE (Building native libraries)"/>
	</target>

	<target name="check.native.libraries" depends="init">
		<echo message="Checking if native libraries are up-to-date..."/>
		<condition property="native.libraries.are.uptodate" value="true">
			<and>
				<!-- Check if libDeflatingDecompressor exists and is up to date -->
				<available file="./libs/armeabi/libDeflatingDecompressor-v3.so" />
				<uptodate targetfile="libs/armeabi/libDeflatingDecompressor-v3.so">
					<srcfiles dir="jni/DeflatingDecompressor" includes="**/*.cpp"/>
				</uptodate>
				<!-- Check if libLineBreak exists and is up to date -->
				<available file="./libs/armeabi/libLineBreak-v2.so" />
				<uptodate property="libLineBreak-build-is-not-required" targetfile="libs/armeabi/libLineBreak-v2.so">
					<srcfiles dir="jni/LineBreak" includes="**/*.cpp,**/*.c,**/*.h"/>
				</uptodate>
				<!-- Check if libNativeFormats exists and is up to date -->
				<available file="./libs/armeabi/libNativeFormats-v3.so" />
				<uptodate property="libNativeFormats-build-is-not-required" targetfile="libs/armeabi/libNativeFormats-v3.so">
					<srcfiles dir="jni/NativeFormats" includes="**/*.cpp,**/*.c,**/*.h"/>
				</uptodate>
			</and>
		</condition>
		<echo message="DONE (Checking if native libraries are up-to-date)"/>
	</target>

	<target name="resources" depends="init, check.native.libraries">

		<echo message="Copying icons files to 'res/drawable/' folder..." />
		<copy todir="res/drawable" verbose="false" overwrite="true" flatten="true">
			<fileset file="icons/*.png" />
			<fileset dir="icons/" includes="*/*" />
		</copy>
		<echo message="DONE (Copying icons files to 'res/drawable/' folder)" />
	</target>

  <target name="-pre-build" depends="init, resources, native">
  </target>
<!--
  <target name="-pre-compile">
  </target>

  <target name="-post-compile">
  </target>
-->
	<target name="clean">
		<echo message="Deleting temporary files..." />
		<delete dir="gen" />
		<delete dir="bin" />
		<delete dir="res/drawable" />
		<delete dir="out" />
		<delete dir="obj" />
		<echo message="DONE (Deleting temporary files)" />
	</target>f

	<target name="distclean" depends="clean">
		<echo message="Deleting native libraries..." />
		<delete dir="libs/armeabi" />
		<delete dir="libs/armeabi-v7a" />
		<delete dir="libs/x86" />
		<delete dir="libs/mips" />
		<delete dir="libs/mips-r2" />
		<delete dir="libs/mips-r2-sf" />
		<echo message="DONE (Deleting native libraries)" />
	</target>
	
	 <!-- Converts this project's .class files into .dex files -->
    <target name="-dex" depends="-compile, -post-compile, -obfuscate"
            unless="do.not.compile">
        <if condition="${manifest.hasCode}">
            <then>
                <!-- Create staging directories to store .class files to be converted to the -->
                <!-- default dex and the secondary dex. -->
                <mkdir dir="${out.classes.absolute.dir}.1"/>
                <mkdir dir="${out.classes.absolute.dir}.2"/>

                <!-- Primary dex to include everything but the concrete library implementation. -->
                <copy todir="${out.classes.absolute.dir}.1" >
                    <fileset dir="${out.classes.absolute.dir}" >
                        <exclude name="org.plutext.DocxToHtml/**" />
                    </fileset>
                </copy>
                <!-- Secondary dex to include the concrete library implementation. -->
                <copy todir="${out.classes.absolute.dir}.2" >
                    <fileset dir="${out.classes.absolute.dir}" >
                        <include name="org.plutext.DocxToHtml/**" />
                    </fileset>
                </copy>

                <!-- Compile .class files from the two stage directories to the apppropriate dex files. -->
                <dex-helper-mod input-dir="${out.classes.absolute.dir}.1"
                    output-dex-file="${out.absolute.dir}/${dex.file.name}" />
                <mkdir dir="${out.absolute.dir}/secondary_dex_dir" />
                <dex-helper-mod input-dir="${out.classes.absolute.dir}.2"
                    output-dex-file="${out.absolute.dir}/secondary_dex_dir/classes.dex" />
                <!-- Jar the secondary dex file so it can be consumed by the DexClassLoader. -->
                <!-- Package the output in the assets directory of the apk. -->
                <jar destfile="${asset.absolute.dir}/secondary_dex.jar"
                     basedir="${out.absolute.dir}/secondary_dex_dir" includes="classes.dex" />
            </then>
            <else>
                <echo>hasCode = false. Skipping...</echo>
            </else>
        </if>
    </target>

  <import file="${sdk.dir}/tools/ant/build.xml" />
</project>
